{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor(fizzBuzzService, cdr) {\n    this.fizzBuzzService = fizzBuzzService;\n    this.cdr = cdr;\n  }\n  ngOnInit() {}\n  ngAfterContentInit() {\n    this.generateRandom();\n  }\n  generateSeries() {\n    this.fizzBuzzService.getFizzBuzzSeries(this.randomNumber, this.limit).subscribe(series => {\n      this.seriesFB = series;\n    });\n    this.fizzColor = this.getRandomColor();\n    this.buzzColor = this.getRandomColor();\n    this.cdr.detectChanges();\n  }\n  generateRandom(min = 1, max = 100) {\n    this.randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    if (this.randomNumber < this.limit) {\n      this.generateSeries();\n    }\n  }\n  formIsValid() {\n    return this.limit > this.randomNumber;\n  }\n  isNumber(val) {\n    return typeof val === 'number';\n  }\n  getSquareColor(number) {\n    if (number === 'fizz') {\n      return this.fizzColor;\n    } else if (number === 'buzz') {\n      return this.buzzColor;\n    } else if (number === 'fizzbuzz') {\n      return this.getGradient(number);\n    } else {\n      return this.getRandomColor();\n    }\n  }\n  getGradient(element) {\n    return `linear-gradient(to right, ${this.fizzColor}, ${this.buzzColor})`;\n  }\n  getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-fizzbuzz',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAWC,uBAAuB,QAAU,eAAe;AAetE,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAOvBC,YAAoBC,eAAgC,EAAUC,GAAsB;IAAhE,oBAAe,GAAfD,eAAe;IAA2B,QAAG,GAAHC,GAAG;EAAuB;EAExFC,QAAQ,IAAU;EAGlBC,kBAAkB;IAEhB,IAAI,CAACC,cAAc,EAAE;EAEvB;EAEAC,cAAc;IAGV,IAAI,CAACL,eAAe,CAACM,iBAAiB,CAAC,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,KAAK,CAAC,CAACC,SAAS,CAAEC,MAAW,IAAI;MAC9F,IAAI,CAACC,QAAQ,GAAGD,MAAM;IACxB,CAAC,CAAC;IAGJ,IAAI,CAACE,SAAS,GAAG,IAAI,CAACC,cAAc,EAAE;IACtC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACD,cAAc,EAAE;IACtC,IAAI,CAACZ,GAAG,CAACc,aAAa,EAAE;EAE1B;EAGAX,cAAc,CAACY,GAAG,GAAE,CAAC,EAAEC,GAAG,GAAC,GAAG;IAC5B,IAAI,CAACV,YAAY,GAAEW,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;IACpE,IAAI,IAAI,CAACT,YAAY,GAAE,IAAI,CAACC,KAAK,EAC/B;MAAC,IAAI,CAACH,cAAc,EAAE;;EAE1B;EAIAgB,WAAW;IACT,OAAO,IAAI,CAACb,KAAK,GAAG,IAAI,CAACD,YAAY;EACvC;EAEAe,QAAQ,CAACC,GAAQ;IAAa,OAAO,OAAOA,GAAG,KAAK,QAAQ;EAAE;EAM9DC,cAAc,CAACC,MAAuB;IAEpC,IAAIA,MAAM,KAAK,MAAM,EAAE;MACrB,OAAO,IAAI,CAACb,SAAS;KACtB,MAAM,IAAIa,MAAM,KAAK,MAAM,EAAE;MAC5B,OAAO,IAAI,CAACX,SAAS;KACtB,MAAM,IAAIW,MAAM,KAAK,UAAU,EAAE;MAChC,OAAO,IAAI,CAACC,WAAW,CAACD,MAAM,CAAC;KAChC,MAAM;MACL,OAAO,IAAI,CAACZ,cAAc,EAAE;;EAGlC;EACAa,WAAW,CAACC,OAAY;IAErB,OAAO,6BAA6B,IAAI,CAACf,SAAS,KAAK,IAAI,CAACE,SAAS,GAAG;EAEzE;EAIAD,cAAc;IACZ,MAAMe,OAAO,GAAG,kBAAkB;IAClC,IAAIC,KAAK,GAAG,GAAG;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,KAAK,IAAID,OAAO,CAACV,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;;IAGlD,OAAOS,KAAK;EACd;CAGD;AApFY/B,YAAY,eANxBF,SAAS,CAAC;EACTmC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB,CAAC;EACnCC,eAAe,EAAErC,uBAAuB,CAACsC;CAC1C,CAAC,GACWrC,YAAY,CAoFxB;SApFYA,YAAY","names":["Component","ChangeDetectionStrategy","AppComponent","constructor","fizzBuzzService","cdr","ngOnInit","ngAfterContentInit","generateRandom","generateSeries","getFizzBuzzSeries","randomNumber","limit","subscribe","series","seriesFB","fizzColor","getRandomColor","buzzColor","detectChanges","min","max","Math","floor","random","formIsValid","isNumber","val","getSquareColor","number","getGradient","element","letters","color","i","selector","templateUrl","styleUrls","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\Users\\Daynel\\Downloads\\FizzBuzz\\ClientApp\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit,  ChangeDetectionStrategy   } from '@angular/core';\nimport { FizzBuzzService } from './fizz-buzz.service';\n\n\n\n\n\n\n\n@Component({\n  selector: 'app-fizzbuzz',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AppComponent implements OnInit {\n  seriesFB: any;\n  randomNumber!: number;\n  limit!: number;\n  fizzColor!: string;\n  buzzColor!: string;\n \n  constructor(private fizzBuzzService: FizzBuzzService, private cdr: ChangeDetectorRef) { }\n\n  ngOnInit(): void {}\n\n\n  ngAfterContentInit ()\n {\n    this.generateRandom();\n   \n  }\n\n  generateSeries(): void {\n\n  \n      this.fizzBuzzService.getFizzBuzzSeries(this.randomNumber, this.limit).subscribe((series: any) => {\n        this.seriesFB = series;\n      });\n      \n    \n    this.fizzColor = this.getRandomColor();\n    this.buzzColor = this.getRandomColor();\n    this.cdr.detectChanges();\n\n  }\n\n\n  generateRandom(min =1, max=100) {\n    this.randomNumber= Math.floor(Math.random() * (max - min + 1)) + min;\n    if (this.randomNumber< this.limit)\n      {this.generateSeries()}\n        \n  }\n   \n  \n\n  formIsValid() {\n    return this.limit > this.randomNumber;\n  }\n\n  isNumber(val: any): boolean { return typeof val === 'number'; }\n\n\n\n\n\n  getSquareColor(number: number | string) : any {\n \n    if (number === 'fizz') {\n      return this.fizzColor;\n    } else if (number === 'buzz') {\n      return this.buzzColor;\n    } else if (number === 'fizzbuzz') {\n      return this.getGradient(number);\n    } else {\n      return this.getRandomColor();\n    }\n  \n}\ngetGradient(element: any): any {\n \n   return `linear-gradient(to right, ${this.fizzColor}, ${this.buzzColor})`;\n    \n  }\n\n\n\n  getRandomColor(): string {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  }\n\n \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}